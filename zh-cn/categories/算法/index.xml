<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on 平平安安的狗窝</title><link>/zh-cn/categories/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on 平平安安的狗窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020-{year} Yao Yuqi. All Rights Reserved.</copyright><lastBuildDate>Thu, 11 Aug 2022 10:28:47 +0800</lastBuildDate><atom:link href="/zh-cn/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Algo String String Sorts</title><link>/zh-cn/guide/algo-string-string-sorts/</link><pubDate>Thu, 11 Aug 2022 10:28:47 +0800</pubDate><guid>/zh-cn/guide/algo-string-string-sorts/</guid><description>本文内容来自 Algorithhms 4th Edition Alphabet 字符串的排序跟传统排序一个重要的区别就是我们可以提前知道字符串的字符集。许多算法都是基于字符集的概念上来的。 1interface Alphabet { 2 // Alphabet(String</description></item><item><title>优先队列</title><link>/zh-cn/guide/algo-sort-priority-queue/</link><pubDate>Tue, 09 Aug 2022 14:02:36 +0800</pubDate><guid>/zh-cn/guide/algo-sort-priority-queue/</guid><description>本文内容来自 Algorithhms 4th Edition Priority Queue之所以重要是因为有时候我们需要在获取部分数据时就进行排序后找到最大/最小的item。 此时我们不必要对这些元素完</description></item><item><title>最短路径</title><link>/zh-cn/guide/algo-graph-shortest-paths/</link><pubDate>Tue, 02 Aug 2022 22:23:10 +0800</pubDate><guid>/zh-cn/guide/algo-graph-shortest-paths/</guid><description>本文内容来自 Algorithhms 4th Edition</description></item><item><title>最小生成树</title><link>/zh-cn/guide/algo-graph-minimum-spanning-tree/</link><pubDate>Tue, 02 Aug 2022 15:49:05 +0800</pubDate><guid>/zh-cn/guide/algo-graph-minimum-spanning-tree/</guid><description>本文内容来自 Algorithhms 4th Edition 中心思想 最小生成树的围绕Cut property这个概念展开。 所谓Cut property， 就是将一个图的顶点分成两部分，一条</description></item><item><title>有向图</title><link>/zh-cn/guide/algo-graph-directed-graph/</link><pubDate>Fri, 29 Jul 2022 14:37:46 +0800</pubDate><guid>/zh-cn/guide/algo-graph-directed-graph/</guid><description>本文内容来自 Algorithhms 4th Edition Glossary Directed Graph / Digraph directed path directed cycle / simple cycle 数据结构 Digraph的结构与Graph类似，除了Adjacency List指保留 w-&amp;gt;v的</description></item><item><title>无向图</title><link>/zh-cn/guide/algo-graph-undirected-graph/</link><pubDate>Fri, 29 Jul 2022 10:00:25 +0800</pubDate><guid>/zh-cn/guide/algo-graph-undirected-graph/</guid><description>本文内容来自 Algorithhms 4th Edition 所谓图，就是有一些顶点和边组成。 基本术语 path degree subgraph simple path cycle / simple cycle connected acyclic tree: an acyclic connected graph forest spanning tree (of a connected graph) 数据结构 在考虑图的数据结构时，需要满</description></item><item><title>查找-平衡二叉树</title><link>/zh-cn/guide/algo-search-balanced-bst/</link><pubDate>Thu, 27 Jan 2022 10:42:01 +0800</pubDate><guid>/zh-cn/guide/algo-search-balanced-bst/</guid><description>本文内容来自 Algorithhms 4th Edition 由于二叉树严重依赖输入的随机性，因此我们需要平衡二叉树（红黑二叉树）来实现能够自动调整树的结构以达到平衡。 2-3查找树 在B</description></item><item><title>查找-二叉树</title><link>/zh-cn/guide/algo-search-bst/</link><pubDate>Wed, 26 Jan 2022 17:25:17 +0800</pubDate><guid>/zh-cn/guide/algo-search-bst/</guid><description>本文内容来自 Algorithhms 4th Edition 对于查找，第一个直觉就是先排序，然后再从中找到需要的对象。那么为什么要将查找和排序分开来呢，一个重要的原因是对于查找我们需</description></item><item><title>排序-快速排序</title><link>/zh-cn/guide/algo-sort-quicksort/</link><pubDate>Thu, 13 Jan 2022 10:05:55 +0800</pubDate><guid>/zh-cn/guide/algo-sort-quicksort/</guid><description>本文内容来自 Algorithhms 4th Edition 快排由于实现起来简单，对各种类型的数据都有效，比大多数排序算法都效率高，因此可能是使用最广泛的排序算法。快排的两个显著特征</description></item><item><title>排序-合并排序</title><link>/zh-cn/guide/algo-sort-mergesort/</link><pubDate>Wed, 12 Jan 2022 15:03:34 +0800</pubDate><guid>/zh-cn/guide/algo-sort-mergesort/</guid><description>本文内容来自 Algorithhms 4th Edition 实现 这个算法的基本思想是合并：将两个排好序的数组合并成一个数组。 因此合并排序简单来说就是将一个数组分成两半，递归的将两半各</description></item><item><title>排序-基本排序</title><link>/zh-cn/guide/algo-sort-elementory/</link><pubDate>Mon, 10 Jan 2022 11:26:12 +0800</pubDate><guid>/zh-cn/guide/algo-sort-elementory/</guid><description>本文内容来自 Algorithhms 4th Edition 前言 排序就是将对象按照一定的顺序排列。据统计，大约有30%的运算都是排序。 有三个理由让我们需要研究排序： 研究排序算法是我们</description></item></channel></rss>